/*
 ============================================================================
 Name        : BP3_Proje1.c
 Author      : Moaaz Ahmed
 Version     :
 Copyright   : BP3_Proje1
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include <Windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "myHeader.h"

// this is to generate a random double number
double random() {
	struct timespec ts;
	//TIMEVAL t1;
	//gettimeofday(&t1,NULL);
	srand((time_t)ts.tv_nsec);
	srand((time(NULL )*((double) rand() / RAND_MAX * 5.0)));
	ns();
	return (double) rand() / RAND_MAX * 5.0;
}

// this is to print any matrix
void printMatris(double satir, double sutun, double **matris) {
	int i, j;
	for (i = 0; i < satir; ++i) {
		for (j = 0; j < sutun; ++j) {
			double a=*(*(matris+j)+i);
			printf(" %lf\t\t",a );
		}
		puts("");
		puts("");
	}
}

// this is to set the heap space free
void free_matrix(int rows, double **mat){
    int i=0;
    for(i=0;i<rows;i++)
        free(mat[i]);
    free(mat);
}

int main(void) {
	int satir=5000;
	int sutun=5000;
	double **A = (double **)malloc(satir * sizeof(double*));
	double **B = (double **)malloc(satir * sizeof(double*));
	double **C = (double **)malloc(satir * sizeof(double*));

	for(int i = 0; i < satir; i++){
		//*(A+i)=	(double *)malloc(satir * sizeof(double));
		A[i] = (double *)malloc(sutun * sizeof(double));
		//*(B+i)=	(double *)malloc(satir * sizeof(double));
		B[i] = (double *)malloc(sutun * sizeof(double));
		//*(C+i)=	(double *)malloc(satir * sizeof(double));
		C[i] = (double *)malloc(sutun * sizeof(double));
	}
	puts("Memory Allocation OK");

	// this is to setting the initial values of matricies
	int y,u;
	for (y = 0; y < satir; ++y) {
		for (u = 0; u < sutun; ++u) {
			A[y][u] =random();
			B[y][u] =random();
			C[y][u] =0.0;
		}
	}

	clock_t start = clock();

	// this is to multiply two matrices
	int i, j, k;
	for (k = 0; k < satir; ++k) {
		for (j = 0; j < sutun; ++j) {
			for (i = 0; i < sutun; ++i) {
				C[k][i]+=A[j][i]*B[k][j];
				//*(*(C+k)+i) +=*(*(A+j)+i) * *(*(B+k)+j);
			}
		}
	}

	clock_t end = clock();
	double seconds = (double)(end - start) / CLOCKS_PER_SEC;
	printf("\n For k,j,i multiplication you spent %lf seconds !\n",seconds);

	// this is to print any matrix
	//puts("-------this is A matrix-------");
	//printMatris(satir, sutun, A);
	//puts("------this is B matrix--------");
	//printMatris(satir, sutun, B);
	//puts("------this is C matrix--------");
	//printMatris(satir, sutun, C);

	// this is setting the heap meomory free
	free_matrix(satir,A);
	free_matrix(satir,B);
	free_matrix(satir,C);

	return 0;
}
